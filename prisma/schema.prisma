// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name init-database
// npx prisma generate sau khi thay doi schema
// npx prisma studio
generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["typedSql"] this features not support for sql-server
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                @id @default(autoincrement())
  email           String             @unique
  name            String
  phone           String?
  address         String?
  gender          String?
  age             Int?  
  avatar          File?
  birthDate       DateTime?
  password        String
  role            String
  refreshToken    String?
  historyStatuses HistoryStatus[]
  employee        Employee?
  employer        Employer?
  admin           Admin?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now()) @updatedAt
}

model Employee {
  skills         String?
  certifications String?
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int          @unique
  records        Record[]
  evaluations    Evaluation[]  

  @@id([userId])
}

model Employer {
  hiringDate     DateTime?
  department     String 
  position       String
  company        Company?   @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  companyId      Int?
  jobPosts       JobPost[]
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int       @unique

  @@id([userId]) // Composite primary key
}

model Company {
  id              Int        @id @default(autoincrement())
  name            String
  businessLicense String
  industry        String
  size            String
  address         String
  employers       Employer[]
  jobPosts        JobPost[]
  logo            File?       @relation(fields: [logoId], references: [id]) 
  logoId          Int?        @unique
}

model Evaluation {
  id          Int      @id @default(autoincrement())
  comment     String?
  rating      Float
  emotion     String?
  employee    Employee @relation(fields: [employeeId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  employeeId  Int
  jobPost     JobPost  @relation(fields: [jobPostId], references: [id])
  jobPostId   Int
}

model Record {
  id              Int       @id @default(autoincrement())
  title           String
  description     String
  owner           Employee  @relation(fields: [ownerId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  ownerId         Int
  historyStatuses HistoryStatus[]
  jobId           Int
  job             JobPost   @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileCv          File      @relation(fields: [fileCvId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fileCvId        Int
}

model File {
  id          Int      @id @default(autoincrement())
  name        String
  folderType  String
  mimeType    String?
  record      Record[]
  company     Company?
  userId      Int?      @unique
  user        User?     @relation(fields: [userId], references: [id])
  jobPostId   Int?      
  jobPost     JobPost?  @relation(fields: [jobPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model HistoryStatus {  
  id          Int       @id @default(autoincrement())
  status      String
  updatedAt   DateTime  @default(now())
  updatedBy   User      @relation(fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedById Int
  record      Record    @relation(fields: [recordId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recordId    Int
}

model JobPost {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  datePosted  DateTime
  location    String
  skills      String
  salary      Float
  deadline    DateTime
  company     Company        @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId   Int
  evaluations Evaluation[]
  records     Record[]
  employer    Employer       @relation(fields: [employerId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  employerId  Int
  tags        TagOnJobPost[]
  covers      File[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
}

model TagOnJobPost {
  jobPostId Int
  jobPost   JobPost @relation(fields: [jobPostId], references: [id])
  tagId     Int
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([jobPostId, tagId]) // Composite primary key
}

model Tag {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  jobPosts    TagOnJobPost[]
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  action    String
  timestamp DateTime
  admin     Admin    @relation(fields: [adminId], references: [userId], onDelete: Cascade)
  adminId   Int
}

model Admin {
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           Int           @unique
  verificationCode String?
  activityLogs     ActivityLog[]

  @@id([userId])
}
