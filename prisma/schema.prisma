// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name init-database
// npx prisma generate sau khi thay doi schema
// npx prisma studio
generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["typedSql"] this features not support for sql-server
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                @id @default(autoincrement())
  email        String             @unique
  name         String
  phone        String?
  address      String?
  password     String
  role         String
  refreshToken String?
  permissions  PermissionOnUser[]
  employee     Employee?
  employer     Employer?
  admin        Admin?
}

model Permission {
  id      Int                @id @default(autoincrement())
  name    String
  method  String
  appPath String
  module  String
  users   PermissionOnUser[]
}

model PermissionOnUser {
  userId       Int
  permissionId Int
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([userId, permissionId]) // Composite primary key
}

model Employee {
  id             Int          @id @default(autoincrement())
  age            Int
  gender         String
  skills         String
  certifications String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int          @unique
  records        Record[]
  evaluations    Evaluation[]
  jobPosts       JobPost[]    @relation("JobPostApplicants")
}

model Employer {
  id             Int       @id @default(autoincrement())
  specialization String
  company        Company   @relation(fields: [companyId], references: [id])
  companyId      Int
  jobPosts       JobPost[]
  user           User      @relation(fields: [userId], references: [id])
  userId         Int       @unique
}

model Company {
  id              Int        @id @default(autoincrement())
  name            String
  businessLicense String
  industry        String
  size            String
  address         String
  employers       Employer[]
  jobPosts        JobPost[]
}

model Evaluation {
  id         Int      @id @default(autoincrement())
  comments   String?
  rating     Float
  emotion    String?
  applicant  Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  jobPost    JobPost  @relation(fields: [jobPostId], references: [id])
  jobPostId  Int
}

model Record {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  filePath    String
  owner       Employee  @relation(fields: [ownerId], references: [id])
  ownerId     Int
  jobPosts    JobPost[] @relation("RecordJobPosts")
}

model JobPost {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  datePosted  DateTime
  location    String
  skills      String
  salary      Float
  status      String
  deadline    DateTime
  company     Company        @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId   Int            @unique
  evaluations Evaluation[]
  applicants  Employee[]     @relation("JobPostApplicants")
  records     Record[]       @relation("RecordJobPosts")
  employer    Employer       @relation(fields: [employerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employerId  Int            @unique
  tags        TagOnJobPost[]
}

model TagOnJobPost {
  jobPostId Int
  jobPost   JobPost @relation(fields: [jobPostId], references: [id])
  tagId     Int
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([jobPostId, tagId]) // Composite primary key
}

model Tag {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  jobPosts    TagOnJobPost[]
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  action    String
  timestamp DateTime
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId   Int
}

model Admin {
  id               Int           @id @default(autoincrement())
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           Int           @unique
  verificationCode String?
  activityLogs     ActivityLog[]
}
